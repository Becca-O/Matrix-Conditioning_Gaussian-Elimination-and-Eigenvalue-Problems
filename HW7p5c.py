#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 24 15:59:13 2018

@author: beccers
"""

# Rebecca Olson
# Homework 7, Problem 5c

import numpy as np

# Part 1b
def CreateSystem(kvec,mvec):
    n = mvec.shape[0]
    A = np.zeros((n, n))
    A[0][0] = (-kvec[0]-kvec[1])/mvec[0]
    A[0][1] = kvec[1]/mvec[0]
    A[n-1][n-1] = (-kvec[n-1]-kvec[n])/mvec[n-1]
    A[n-1][n-2] = kvec[n-1]/mvec[n-1]
    for i in range(1, n-1, 1):
        A[i][i-1] = kvec[i]/mvec[i]
        A[i][i] = (-kvec[i]-kvec[i+1])/mvec[i]
        A[i][i+1] = kvec[i+1]/mvec[i]
    return A

#Part 1c
# testing that my function works for the scenario explored in class (for n = 2) with k1 = k2 = k3 = 1, and m1 = m2 = 1
kvec1 = np.array([[2.], [2.], [2.]])
mvec = np.array([[2.], [2.]])
eigen = np.linalg.eig(CreateSystem(kvec1, mvec)) # inputting the 2Ã—2 array generated by CreateSystem into np.linalg.eig() to determine the eigenvalues and eigenvectors
eigenvalues, eigenvectors = eigen
print('Eigenvalues')
print(eigenvalues)
print('')
print('Eigenvectors')
print(eigenvectors)